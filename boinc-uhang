#!/usr/bin/env python3
"""boinc-uhang  -  un-hangs stuck tasks

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = []
__license__ = "GNU General Public License"
__program_name__ = "boinc-uhang"
__version__ = "v2.3.1"
__maintainer__ = "RueiKe"
__status__ = "Development"

import argparse
import re
import subprocess
import threading
import os
import platform
import sys
import time
from BOINCmodules import BOINCmodule as BOINC
from BOINCmodules import env
from datetime import datetime
from uuid import uuid4
import glob 
import shutil 
from pathlib import Path



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--log", help="Write all actions to logfile", action="store_true", default=False)
    parser.add_argument("--sleep", help="Number of seconds to sleep between checks", type=int, default=5)
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()


    # About me
    if args.about == True :  
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    env.gut_const.PATH = os.path.dirname(str(Path(__file__).resolve()))
    env.gut_const.DEBUG = args.debug

    if env.gut_const.check_env() < 0:
        print("Error in environment. Exiting...")
        sys.exit(-1)

    task_list0 = BOINC.TASK_LIST()
    task_list0.read_task_list()

    # Display text style Monitor
    try:
        while True:
            if env.gut_const.LOG == True:  
                print("%sLogging to:  %s%s" % ("\033[31m \033[01m", env.gut_const.log_file, "\033[0m"))
            time.sleep(env.gut_const.SLEEP)
            task_list1 = BOINC.TASK_LIST()
            task_list1.read_task_list()
            task_list1.find_hung_task(task_list0)
            task_list0 = task_list1
    except KeyboardInterrupt:
        if env.gut_const.LOG == True:  
            env.gut_const.log_file_ptr.close()
        sys.exit(0)


if __name__ == "__main__":
    main()
